#+TITLE: Emacs Main Configuration
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t; -*-
#+END_SRC

* Self Information
Set name and email address

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Matthew Rothlisberger")
(setq user-mail-address "example@gmail.com")
#+END_SRC

* Package Management
** Ensure Installation
Make sure that all packages mentioned in this configuration are
installed if not already present

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

** Automatic Updates
Update any outdated packages on startup

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

* Basic Improvements
** Remove Bars
Toolbar already removed in init.el; but also remove scroll bars and
menu bar. *Menus can still be accessed with C-<mouse right>*

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Backups
Keep file backups in an unobtrusive location and keep more of them

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 5
      )
#+END_SRC

** Recent Files
Make sure to track recently opened files

#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
#+END_SRC

** Minibuffer
Save minibuffer history, keep cursor out of prompt, permit recursion

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (savehist-mode))

(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

(setq enable-recursive-minibuffers t)
#+END_SRC

** Parentheses
When point is on a parenthesis, bracket, or brace, show its pair; also
automatically insert a paired symbol when one is entered

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

(electric-pair-mode 1)
(setq-default electric-pair-delete-adjacent-pairs t)
(setq-default electric-pair-preserve-balance t)
#+END_SRC

** Indentation
Do not use tabs for indentation, but also define and bind a tab width
cycling function to C-c t for when they do appear

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)

(defun my-tab-width ()
  "Cycle tab width between values 2, 4, and 8."
  (interactive)
  (setq tab-width
        (cond ((eq tab-width 8) 2)
              ((eq tab-width 2) 4)
              (t 8)))
  (redraw-display))

(global-set-key (kbd "C-c t") 'my-tab-width)
#+END_SRC

** Line Wrap
Globally make lines that are too long wrap to the next visual line

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Better Utilities
Replace the automatically enabled buffer view and expansion system
with better alternatives

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-/") 'hippie-expand)

(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+END_SRC

** Uniquify
Make sure that all buffer names are unique, even if the file names are
the same

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Unfill
Install and enable unfill package, and bind M-q to toggle paragraph
fill instead of only filling

#+BEGIN_SRC emacs-lisp
(use-package unfill
  :ensure t
  :bind ("M-q" . unfill-toggle))
#+END_SRC

** Winner Mode
Allow changes in window configuration to be undone or redone with the
key combinations C-c left and C-c right.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Browse Kill Ring
Enable looking through the kill ring as necessary to get previously
killed text without excessive keystrokes

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
  :bind ("C-c y" . browse-kill-ring))
#+END_SRC

* Appearance
** Dashboard
Use a different startup screen that shows more useful information and
may be extended

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :custom
  (dashboard-projects-backend 'project-el)
  (dashboard-center-content t)
  (dashboard-items '((recents . 5)
                     (projects . 5)
                     (registers . 5)))
  (dashboard-icon-type 'nerd-icons)
  (dashboard-display-icons-p t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
)
#+END_SRC

** Icons
Make more icons available for themes and other packages to use

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons)
#+END_SRC

** Doom Theme
Use one of the doom-themes to make Emacs look extra nice (unsure
whether I want to stick to this; a simple color theme might be better)

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold nil)
  (setq doom-acario-dark-brighter-comments nil)
  (setq doom-acario-dark-comment-bg t)

  (load-theme 'doom-acario-dark t)

  (doom-themes-org-config)
  (doom-themes-visual-bell-config))

#+END_SRC

** Mode Line
*** Doom Mode Line
Use a pre-configured mode line designed for the doom theme

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-height 24)
  :hook (after-init . doom-modeline-mode))
#+END_SRC

*** Additional Info
Show current time in the mode line

#+BEGIN_SRC emacs-lisp
(setq display-time-format nil)
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
(display-time-mode 1)
#+END_SRC

* Keybindings
** Dvorak Fixes
Make the function of C-x and M-x more accessible with the Dvorak
layout by rebinding to C-u and M-u

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "C-x") (kbd "C-u"))
(define-key key-translation-map (kbd "C-u") (kbd "C-x"))

(define-key key-translation-map (kbd "M-x") (kbd "M-u"))
(define-key key-translation-map (kbd "M-u") (kbd "M-x"))
#+END_SRC

** Backspace
Bind <DEL> to C-h to make editing much faster; use <F1> to access help
instead

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))
#+END_SRC

** Backwards Kill
Rebind C-w to a function that behaves normally when region is active,
but kills one word backwards otherwise

#+BEGIN_SRC emacs-lisp
(defun kill-region-or-backward-kill-word (&optional arg region)
  "'kill-region' if the region is active, otherwise 'backward-kill-word'"
  (interactive
   (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
  (if region
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(global-set-key (kbd "C-w") 'kill-region-or-backward-kill-word)
#+END_SRC

** C-c <char> Bindings
Set my own custom bindings of various Emacs functions to unbound C-c
combinations

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'delete-indentation)
(global-set-key (kbd "C-c e") 'enlarge-window)
(global-set-key (kbd "C-c h") 'help)
(global-set-key (kbd "C-c r") 'replace-string)
#+END_SRC

** Drag Stuff
Enable dragging lines and regions around in a file, just like bullet
points in Org mode

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  )
#+END_SRC

** Smart Hungry Delete
Allow me to delete lots of whitespace at once, avoiding repeated
key presses

#+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :ensure t
  :bind (("<DEL>" . smart-hungry-delete-backward-char)
         ("C-d" . smart-hungry-delete-forward-char))
  :defer nil ;; don't defer so we can add our functions to hooks
  :config (smart-hungry-delete-add-default-hooks))
#+END_SRC

* Major Mode Changes
** Grep Mode
Add capability to edit grep buffers

#+BEGIN_SRC emacs-lisp
(use-package wgrep)
#+END_SRC

** Text Mode
Automatically turn on spell check and auto fill in all text and org
mode buffers

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Programming Mode
*** Todo Highlight
Make TODO items stand out more

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :custom
  (hl-todo-color-background nil)
  (hl-todo-keyword-faces
   '(("TODO" . "#FFA000")
     ("NOTE" . "#70C0F0")))
  :bind (:map hl-todo-mode-map
              ("C-c t p" . hl-todo-previous)
              ("C-c t n" . hl-todo-next)
              ("C-c t o" . hl-todo-occur)
              ("C-c t i" . hl-todo-insert))
  :hook (prog-mode . hl-todo-mode))
#+END_SRC

*** Spell Check
Use flyspell to check spelling in code comments

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

*** Line Numbers
Display line numbers in code buffers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

*** White Space
Show trailing (unnecessary) white space on all lines where it appears,
but only in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+END_SRC

** Rust Mode
Add and use the official Rust mode for Emacs, and the Cargo minor mode

#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
(use-package cargo
  :config (add-hook 'rust-mode-hook 'cargo-minor-mode))
#+END_SRC

** C Mode
Set the C tab offset to 4; also define a new C style that fits my
preferences, then set it to the default style

#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)

(c-add-style "my-style"
             '("gnu"
               (c-basic-offset . 4)     ; Guessed value
               (c-offsets-alist
                (block-close . 0)       ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (defun-open . 0)        ; Guessed value
                (statement . 0)             ; Guessed value
                (statement-block-intro . +) ; Guessed value
                (substatement . +)      ; Guessed value
                (substatement-open . 0) ; Guessed value
                (topmost-intro . 0)     ; Guessed value
                (access-label . -)
                (annotation-top-cont . 0)
                (annotation-var-cont . +)
                (arglist-close . c-lineup-close-paren)
                (arglist-cont c-lineup-gcc-asm-reg 0)
                (arglist-cont-nonempty . c-lineup-arglist)
                (arglist-intro . c-lineup-arglist-intro-after-paren)
                (block-open . 0)
                (brace-entry-open . 0)
                (brace-list-close . 0)
                (brace-list-entry . c-lineup-under-anchor)
                (brace-list-intro . c-lineup-arglist-intro-after-paren)
                (brace-list-open . +)
                (c . c-lineup-C-comments)
                (case-label . 0)
                (catch-clause . 0)
                (class-close . 0)
                (class-open . 0)
                (comment-intro . c-lineup-comment)
                (composition-close . 0)
                (composition-open . 0)
                (cpp-define-intro c-lineup-cpp-define +)
                (cpp-macro . -1000)
                (cpp-macro-cont . +)
                (do-while-closure . 0)
                (else-clause . 0)
                (extern-lang-close . 0)
                (extern-lang-open . 0)
                (friend . 0)
                (func-decl-cont . +)
                (inclass . +)
                (incomposition . +)
                (inexpr-class . +)
                (inexpr-statement . +)
                (inextern-lang . +)
                (inher-cont . c-lineup-multi-inher)
                (inher-intro . +)
                (inlambda . c-lineup-inexpr-block)
                (inline-close . 0)
                (inline-open . 0)
                (inmodule . +)
                (innamespace . +)
                (knr-argdecl . 0)
                (knr-argdecl-intro . 5)
                (label . 0)
                (lambda-intro-cont . +)
                (member-init-cont . c-lineup-multi-inher)
                (member-init-intro . +)
                (module-close . 0)
                (module-open . 0)
                (namespace-close . 0)
                (namespace-open . 0)
                (objc-method-args-cont . c-lineup-ObjC-method-args)
                (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                (objc-method-intro .
                                   [0])
                (statement-case-intro . +)
                (statement-case-open . +)
                (statement-cont . +)
                (stream-op . c-lineup-streamop)
                (string . -1000)
                (substatement-label . 0)
                (template-args-cont c-lineup-template-args +)
                (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont))))

(setq c-default-style "my-style")
#+END_SRC

** GLSL Mode
Add a mode for GLSL shader programs

#+BEGIN_SRC emacs-lisp
(use-package glsl-mode)
#+END_SRC

** Lua Mode
Add and use a Lua mode for Emacs

#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC

** Elisp Mode
Set eldoc mode, to automatically show brief documentation of elisp
functions at point; also bind M-. in elisp mode to describe the
function at point

#+BEGIN_SRC emacs-lisp
(eldoc-mode 1)

(define-key emacs-lisp-mode-map
  (kbd "M-.") 'find-function-at-point)
#+END_SRC

** SQL Mode
Use sqlup to automatically change SQL keywords to uppercase while
typing, and blacklist any necessary words

#+BEGIN_SRC emacs-lisp
(use-package sqlup-mode
  :config
  (add-hook 'sql-mode-hook 'sqlup-mode)
  (add-hook 'sql-interactive-mode-hook 'sqlup-mode)

  (add-to-list 'sqlup-blacklist "name")
  (add-to-list 'sqlup-blacklist "schema"))
#+END_SRC

** YAML Mode
Add a mode for YAML configuration files, which are used by Jekyll

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** Ada Mode
Add a mode for Ada source files

#+BEGIN_SRC emacs-lisp
;; (use-package wisi)
;; (use-package ada-mode)
#+END_SRC

** Scheme Mode
#+BEGIN_SRC emacs-lisp
(use-package geiser)
(use-package geiser-guile)
(use-package geiser-mit)

(add-hook 'scheme-mode-hook 'geiser-mode)
(setq geiser-default-implementation 'guile)

(define-key scheme-mode-map
            (kbd "C-c l") 'geiser-load-current-buffer)
#+END_SRC

* Wayfinding
Locate things and complete actions quickly

** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :ensure t
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c t" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flycheck)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
)
#+END_SRC

** Embark
Embark on a journey

#+BEGIN_SRC emacs-lisp
(use-package embark
  :ensure t
  :bind*
  (("C-." . embark-act)
  ("C-;" . embark-dwim)
  ("C-c b" . embark-bindings))
  :init
  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

* Completions
** Marginalia
Completion info in the minibuffer

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+END_SRC

** Icons
Add icons to many completion minibuffers

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+END_SRC

** Cape
Further completion enhancements

#+BEGIN_SRC emacs-lisp
(use-package cape)
#+END_SRC

** Orderless
Fancy completion style

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :demand t
  :config
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles . (partial-completion flex)))
                                   (command (styles +orderless-with-initialism))
                                   (variable (styles +orderless-with-initialism))
                                   (symbol (styles +orderless-with-initialism))))
  (orderless-component-separator #'orderless-escapable-split-on-space))
#+END_SRC

** Vertico
Vertical completion system

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC

** Corfu
In-buffer completion package integrated with Emacs facilities

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 1)
  :bind
  (:map corfu-map
        ;; ("RET" menu-item "" nil :filter corfu-insert-shell-filter)
        ("RET" . nil)
        ("<remap> <previous-line>" . nil)
        ("<remap> <next-line>" . nil))
  :init
  (global-corfu-mode))

;; (defun corfu-send-shell (&rest _)
;;   "Send completion candidate when inside comint/eshell."
;;   (cond
;;    ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
;;     (eshell-send-input))
;;    ((and (derived-mode-p 'comint-mode) (fboundp 'comint-send-input))
;;     (comint-send-input))))

;; ;; (advice-add #'corfu-insert :after #'corfu-send-shell)

;; (defun corfu-insert-shell-filter (&optional _)
;;   "Insert completion candidate and send when inside comint/eshell."
;;   (when (or (derived-mode-p 'eshell-mode) (derived-mode-p 'comint-mode))
;;     (lambda ()
;;       (interactive)
;;       (corfu-insert)
;;       ;; `corfu-send-shell' was defined above
;;       (corfu-send-shell))))

;; (bind-key "RET" nil corfu-map '(corfu-insert-shell-filter))

(use-package nerd-icons-corfu
  :init
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+END_SRC

* Navigation
** Ace Window
Set up quicker window switching than normal, for when more than two
are present; also set the face of the selection characters to be much
more visible

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window)
  :custom-face
  (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :foreground "yellow"
                                      :weight semi-bold :slant normal :underline nil :height 4.0))))
  :config
  (setq aw-keys '(?a ?h ?t ?s ?p ?k ?g ?r ?w))
  (setq aw-background t))
#+END_SRC

** Deadgrep
Fast text search using the ripgrep utility

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :bind ("<f5>" . deadgrep))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens)
(require 'smartparens-config)
#+END_SRC

* Org Mode
** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult-notes
  :commands (consult-notes
             consult-notes-search-in-all-notes
             consult-notes-org-roam-find-node
             consult-notes-org-roam-find-node-relation)
  :bind
  ("C-c n f" . consult-notes)
  ("C-c n s" . consult-notes-search-in-all-notes)
  :config
  (setq consult-notes-file-dir-sources '(("Org"  ?o  "~/org/")))
  ;; (setq consult-notes-org-headings-files '("~/org/learn.org"))
  ;; (consult-notes-org-headings-mode)
  (consult-notes-org-roam-mode))
#+END_SRC

** Org Roam
Zettelkasten-style notes

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :bind
  ("C-c c b" . org-roam-buffer-toggle)
  ("C-c c c" . org-roam-capture)
  ("C-c c f" . org-roam-node-find)
  ("C-c c i" . org-roam-node-insert)

  ("C-c w n" . org-roam-dailies-capture-today)
  ("C-c w t" . org-roam-dailies-goto-today)
  ("C-c w b" . org-roam-dailies-goto-previous-note)
  ("C-c w f" . org-roam-dailies-goto-next-note)
  :custom
  (org-roam-directory "~/org/commonplace")
  (org-roam-database-connector 'sqlite-builtin)

  (org-roam-dailies-directory "waste/")
  (org-roam-dailies-capture-templates
   '(("d" "default" entry
      "* %?"
      :target (file+head "%<%Y-%m-%d>.org"
                         "#+TITLE: %<%Y-%m-%d>\n"))))
  )

(org-roam-db-autosync-mode)
#+END_SRC

** Org Journal
Extension specifically for journaling

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :bind
  ("C-c j n" . org-journal-new-entry)
  :custom
  ;; (org-journal-date-prefix "#+title: ")
  (org-journal-file-type 'weekly)
  (org-journal-file-format "%YW%W.org")
  (org-journal-dir "~/org/journal")
  (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC

** Global Keybindings
Set recommended global keybindings for important org functions

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o l") 'org-store-link)
(global-set-key (kbd "C-c o a") 'org-agenda)
(global-set-key (kbd "C-c o c") 'org-capture)
(global-set-key (kbd "C-c o b") 'org-switchb)
#+END_SRC

** Layout Settings
Hide extraneous asterisks and enable pretty indentation for org
buffers

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
(setq org-startup-indented t)
#+END_SRC

Improve LaTeX formatting

#+BEGIN_SRC emacs-lisp
(plist-put org-format-latex-options :scale 1.4)
#+END_SRC

** Editing
Try to catch attempted edits to folded subtrees

#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'smart)
#+END_SRC

** Logging
Log time of completion for finished to do items

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

** Babel
Make sure that source code blocks in org files behave as they are
supposed to

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (scheme . t)))
#+end_src

*** Scheme
Improvements to Scheme behavior under Org Babel

#+begin_src emacs-lisp
(setq org-babel-default-header-args:scheme
      (cons '(:session . ())
            (assq-delete-all :session org-babel-default-header-args:scheme)))

(defun org-babel-load-session:scheme (session body params)
  "Load BODY into session corresponding to SESSION, or default."
  (save-excursion
    (let* ((source-buffer (current-buffer))
	   (source-buffer-name (replace-regexp-in-string ;; zap surrounding *
			        "^ ?\\*\\([^*]+\\)\\*" "\\1"
			        (buffer-name source-buffer)))
           (impl (or (when (cdr (assq :scheme params))
		       (intern (cdr (assq :scheme params))))
		     geiser-scheme-implementation
		     geiser-default-implementation
		     (car geiser-active-implementations)))
           (full-body (org-babel-expand-body:scheme body params))
           (session- (org-babel-scheme-make-session-name
                      source-buffer-name session impl))
           (repl-buffer (org-babel-scheme-get-repl impl session-)))
      (with-current-buffer repl-buffer
        (goto-char (process-mark (get-buffer-process (current-buffer))))
        (insert (org-babel-chomp full-body))
        (geiser-repl--send-input))
      repl-buffer)))
#+END_SRC

** Exports
*** Markdown
Require ox-md for Markdown exports from Org files.

Change a function from =ox-md.el= from a complex mess to simply return
true. This causes every headline to be given an anchor link when
exporting to markdown, regardless of whether it is linked to. I did
this to correct an issue where no anchor links are generated when the
table of contents is moved to a new location in the document.

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
(defun org-md--headline-referred-p (headline info) t)
#+END_SRC

*** Hugo
Use ox-hugo to export, from a single org file, many pages of content
for a static site generated by Hugo. This allows me to write my
website pages and my blog in a much cleaner environment than many
separate markdown files.

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after ox)
#+END_SRC

* Dired
** New Dired Buffers
Kill the current buffer when selecting a new directory to display.

#+BEGIN_SRC emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+END_SRC

** Kill Dired Buffers
Define a function to kill every open dired buffer at once; can also be
accomplished in Ibuffer with * / D

#+BEGIN_SRC emacs-lisp
(defun kill-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (mapc (lambda (buffer)
    (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
      (kill-buffer buffer)))
  (buffer-list)))
#+END_SRC

** Icons Support
Use icons for files in dired

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+END_SRC

* Magit
Make sure Magit is installed and set important keybindings, then
install Magit Forge to integrate with GitHub and GitLab; connect SSH
agent to Emacs using keychain.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :demand t
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)))

(use-package forge
  :after magit)

(use-package consult-git-log-grep
  :custom
  (consult-git-log-grep-open-function #'magit-show-commit))

(use-package keychain-environment)
(keychain-refresh-environment)
#+END_SRC

* Flycheck
** Main
Install and enable Flycheck on all relevant buffers

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (flycheck-add-mode 'proselint 'org-mode))
#+END_SRC

** Inline
Make inline error reporting available (especially useful for Rust);
use flycheck-inline-mode

#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
  :hook (rust-mode . flycheck-inline-mode))
#+END_SRC

** Rust
Install flycheck-rust for additional Rust checking support

#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult-flycheck)
#+END_SRC

* LSP Mode
Use Language Server Protocol to get additional insight into code

#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 1024 1024))

(setq lsp-keymap-prefix "C-c s")

(setq lsp-rust-server 'rust-analyzer)

(use-package lsp-mode
  :custom
  (lsp-enable-snippet nil)
  (lsp-completion-provider :none)
  :init
  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
    (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point))))
  :hook
  (rust-mode . lsp)
  (c-mode . lsp)
  (c++-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  (lsp-completion-mode . my/lsp-mode-setup-completion)
  :commands lsp)

(use-package lsp-ui :commands lsp-ui-mode)
#+END_SRC

Use LSP Booster to speed up parsing and communication
Below code from https://github.com/blahgeek/emacs-lsp-booster

#+BEGIN_SRC emacs-lisp
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)
             (not (file-remote-p default-directory))
             lsp-use-plists
             (not (functionp 'json-rpc-connection))
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let* ((command-from-exec-path (executable-find (car orig-result))))
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+END_SRC

* Email
** org-mime
Allows emails with org components to be converted to html

#+BEGIN_SRC emacs-lisp
(use-package org-mime)
#+END_SRC

** mu4e
Full email client in emacs; must be installed on system level

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
(require 'mu4e)

(setq mail-user-agent 'mu4e-user-agent)
(setq mu4e-maildir (expand-file-name "~/Maildir"))

; get mail
(setq mu4e-get-mail-command "offlineimap -o"
  ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
  mu4e-view-prefer-html t
  mu4e-update-interval 180
  mu4e-headers-auto-update t
  mu4e-compose-signature-auto-include nil
  mu4e-compose-format-flowed t)

;; to view selected message in the browser, no signin, just html mail
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

;; every new email composition gets its own frame!
;(setq mu4e-compose-in-new-frame t)

;; don't save message to Sent Messages, IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)

;; <tab> to navigate to links, <RET> to open them in browser
(add-hook 'mu4e-view-mode-hook
  (lambda()
;; try to emulate some of the eww key-bindings
(local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
(local-set-key (kbd "<tab>") 'shr-next-link)
(local-set-key (kbd "<backtab>") 'shr-previous-link)))

;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
(add-hook 'mu4e-headers-mode-hook
      (defun my/mu4e-change-headers ()
    (interactive)
    (setq mu4e-headers-fields
          `((:human-date . 25) ;; alternatively, use :date
        (:flags . 6)
        (:from . 22)
        (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
        (:size . 7)))))

;; if you use date instead of human-date in the above, use this setting
;; give me ISO(ish) format date-time stamps in the header list
(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

;; spell check
(add-hook 'mu4e-compose-mode-hook
    (defun my-do-compose-stuff ()
       "My settings for message composition."
       (visual-line-mode)
       (org-mu4e-compose-org-mode)
           (use-hard-newlines -1)
       (flyspell-mode)))

(require 'smtpmail)

;;rename files when moving
;;NEEDED FOR MBSYNC
(setq mu4e-change-filenames-when-moving t)

;;set up queue for offline email
;;use mu mkdir  ~/Maildir/acc/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode

;;from the info manual
(setq mu4e-attachment-dir  "~/Downloads")

(setq message-kill-buffer-on-exit t)
(setq mu4e-compose-dont-reply-to-self t)

;; (require 'org-mu4e)

;; convert org mode to HTML automatically
(setq org-mu4e-convert-to-html t)

;;from vxlabs config
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; don't ask when quitting
(setq mu4e-confirm-quit nil)

;; mu4e-context
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'always-ask)
(setq mu4e-contexts
  (list
   (make-mu4e-context
    :name "main" ;;for example-gmail
    :enter-func (lambda () (mu4e-message "Entering context main"))
    :leave-func (lambda () (mu4e-message "Leaving context main"))
    :match-func (lambda (msg)
          (when msg
        (mu4e-message-contact-field-matches
         msg '(:from :to :cc :bcc) "example@gmail.com")))
    :vars '((user-mail-address . "example@gmail.com")
        (user-full-name . "Matthew Rothlisberger")
        (mu4e-sent-folder . "/example-gmail/[example].Sent Mail")
        (mu4e-drafts-folder . "/example-gmail/[example].drafts")
        (mu4e-trash-folder . "/example-gmail/[example].Trash")
        (mu4e-compose-signature . (concat "Matthew Rothlisberger\n" "\n"))
        (mu4e-compose-format-flowed . t)
        (smtpmail-queue-dir . "~/Maildir/example-gmail/queue/cur")
        (message-send-mail-function . smtpmail-send-it)
        (smtpmail-smtp-user . "example")
        (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
        (smtpmail-auth-credentials . (expand-file-name "~/.authinfo"))
        (smtpmail-default-smtp-server . "smtp.gmail.com")
        (smtpmail-smtp-server . "smtp.gmail.com")
        (smtpmail-smtp-service . 587)
        (smtpmail-debug-info . t)
        (smtpmail-debug-verbose . t)
        (mu4e-maildir-shortcuts . ( ("/example-gmail/INBOX"            . ?i)
                    ("/example-gmail/[example].Sent Mail" . ?s)
                    ("/example-gmail/[example].Trash"       . ?t)
                    ("/example-gmail/[example].All Mail"  . ?a)
                    ("/example-gmail/[example].Starred"   . ?r)
                    ("/example-gmail/[example].drafts"    . ?d)
                    ))))))
#+END_SRC

* Miscellaneous
** Which Key
When a key sequence is in progress, after a short delay, display
possible next keystrokes and the functions they invoke

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :custom
  (which-key-idle-delay 0.3)
  :config
  (which-key-mode))
#+END_SRC

** Speed Type
Allow me to run a typing test inside Emacs

#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC

** Ledger Mode
Double entry accounting

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode)
#+END_SRC

** Shutdown
Power-off the system

#+BEGIN_SRC emacs-lisp
(let ((now (decode-time)))
  (run-at-time
   (encode-time
    `(50
      59
      21
      ,(decoded-time-day now)
      ,(decoded-time-month now)
      ,(decoded-time-year now)
      nil
      -1
      ,(decoded-time-zone now)))
   nil
   (lambda () (shell-command "if [ $(date +%H) -gt 20 ]; then systemctl poweroff; fi"))))
#+END_SRC
